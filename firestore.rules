/**
 * @fileoverview Firestore Security Rules for Error Reports.
 *
 * Core Philosophy:
 * This ruleset enforces that error reports are namespaced by `appId` for application-specific data isolation. 
 * It uses a public data structure (`artifacts/{appId}/public/data/error_reports/{errorReportId}`) to allow listing without exposing private user data.
 *
 * Data Structure:
 * Error reports are stored under `/artifacts/{appId}/public/data/error_reports/{errorReportId}`.
 * Each error report contains data related to a specific application and technician report.
 *
 * Key Security Decisions:
 * - Public read access is granted to all error reports to support listing and filtering.
 * - Only authenticated users can create, update, or delete error reports, and they must be the user who created the report (owner).
 * - Data consistency between the path and document properties is enforced to prevent unauthorized access or manipulation.
 *
 * Denormalization for Authorization:
 * - The `ErrorReport` entity requires a `reportedByUserId` field. This field MUST contain the user ID of the user that created the report.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to error reports and restricts write access to the owner.
     * @path /artifacts/{appId}/public/data/error_reports/{errorReportId}
     * @allow (get, list): Public read access is allowed.
     * @allow (create): Authenticated user with matching `reportedByUserId`.
     * @allow (update, delete): Authenticated owner of the error report.
     * @deny (create): Unauthenticated user.
     * @deny (create): Authenticated user with mismatched `reportedByUserId`.
     * @deny (update, delete): Non-owner attempting to modify or delete the error report.
     * @principle Enforces public read access with owner-only writes, validates relational integrity.
     */
    match /artifacts/{appId}/public/data/error_reports/{errorReportId} {
      // Allow anyone to read error reports
      allow get, list: if true;

      // Only allow authenticated users to create error reports, and enforce that reportedByUserId matches the authenticated user's ID
      allow create: if isSignedIn() && request.resource.data.reportedByUserId == request.auth.uid;

      // Only the owner (creator) of the error report can update or delete it, and only if the document exists
      allow update, delete: if isExistingOwner(resource.data.reportedByUserId);

    }

    // ---- Helper functions ----

    // Checks if the user is signed in (i.e., authenticated).
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the resource (i.e., resource.data.reportedByUserId == request.auth.uid)
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Checks if the user is the owner of the existing resource
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}