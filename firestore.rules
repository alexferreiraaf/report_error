/**
 * @fileOverview Firestore Security Rules for Error Reporting System.
 *
 * Core Philosophy:
 * This ruleset allows any authenticated user (including anonymous) to create error reports under a specific application ID. All error reports are stored in a single collection for simplified security management. Public read access is enabled to allow listing all reports.
 *
 * Data Structure:
 * Error reports are stored under the `/artifacts/{appId}/public/data/error_reports/{errorReportId}` path.
 *
 * Key Security Decisions:
 * - All authenticated users can create error reports.
 * - Public read access (get, list) is granted for the error_reports collection.
 * - Write access (create, update, delete) is restricted to authenticated users only.
 * - The 'reportedByUserId' field is validated to match the authenticated user's ID on create.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to create error reports and allows public read access (get, list).
     * @path /artifacts/{appId}/public/data/error_reports/{errorReportId}
     * @allow (create) - An authenticated user can create a new error report with a matching `reportedByUserId`.
     * @allow (get, list) - Any user can read error reports.
     * @deny (create) - An unauthenticated user attempts to create an error report.
     * @deny (update, delete) - Any user attempts to update or delete an error report.
     * @principle Allows authenticated users to create error reports while providing public read access.
     */
    match /artifacts/{appId}/public/data/error_reports/{errorReportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.reportedByUserId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---
    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}