/**
 * @fileOverview
 * This ruleset enforces a public read with owner-only writes model for error reports.
 * All data is stored under /artifacts/{appId}/public/data/error_reports/{errorReportId}.
 *
 * Core Philosophy:
 * Error reports are publicly readable to facilitate listing and filtering, but only the creator can modify them.
 *
 * Data Structure:
 * Error reports are stored under `/artifacts/{appId}/public/data/error_reports/{errorReportId}`, nested under an `appId` for data isolation.
 *
 * Key Security Decisions:
 * - Error reports are publicly readable to facilitate listing and filtering.
 * - Only the user who created the error report can update or delete it.
 * - The rules enforce that the `reportedByUserId` field matches the authenticated user's ID on creation,
 *   and that this field cannot be changed after creation to maintain relational integrity.
 * - The rules do NOT validate the structure of the error report data beyond the `reportedByUserId` field.
 *
 * Denormalization for Authorization:
 * - The `ErrorReport` entity includes the `reportedByUserId` field. This denormalization is CRUCIAL
 *   for enforcing owner-only writes without needing additional reads.
 *
 * Structural Segregation:
 * - Error reports are stored under a path including the `appId` to isolate data for each application.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to error reports while restricting write access to the owner.
     * @path /artifacts/{appId}/public/data/error_reports/{errorReportId}
     * @allow (get, list) Read access is public.
     * @allow (create) User with ID 'user_abc' can create a new error report with `reportedByUserId: 'user_abc'`.
     * @allow (update, delete) User with ID 'user_abc' can update/delete an existing error report where `resource.data.reportedByUserId == 'user_abc'`.
     * @deny (create) User with ID 'user_def' cannot create an error report with `reportedByUserId: 'user_abc'`.
     * @deny (update, delete) User with ID 'user_def' cannot update/delete an existing error report where `resource.data.reportedByUserId == 'user_abc'`.
     * @principle Public read, owner-only writes. Enforces document ownership and prevents unauthorized modifications.
     */
    match /artifacts/{appId}/public/data/error_reports/{errorReportId} {
      // Allow anyone to read error reports.
      allow get, list: if true;

      // Only allow the user who created the error report to create a new report,
      // and ensure the reportedByUserId matches the authenticated user's ID.
      allow create: if isSignedIn() && request.resource.data.reportedByUserId == request.auth.uid;

      // Only allow the user who created the error report to update or delete it.
      // Also, ensure that the document exists before allowing the update or delete.
      allow update: if isSignedIn() && isExistingOwner(resource.data.reportedByUserId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.reportedByUserId);

      // Deny all other operations
      allow create: if false;

      // Define helper function to check if the user is the owner of the document AND the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Define helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
    }

    // Define helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}