/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy:
 * This ruleset allows any authenticated user (including anonymous users) to create error reports under a specific application ID.
 * All error reports are stored in a single collection: `/artifacts/{appId}/public/data/error_reports/{errorReportId}`.
 * No listing of all error reports is allowed.
 *
 * @Data Structure:
 * Error reports are stored under `/artifacts/{appId}/public/data/error_reports/{errorReportId}`.
 * The `appId` path parameter allows for separation of error reports from different applications if needed.
 * The document ID (`errorReportId`) is autogenerated and should not be validated on creation.
 *
 * @Key Security Decisions:
 * - Error reports are publicy accessible for reading.
 * - Error report creation is allowed by any authenticated user (including anonymous users).
 * - Updating and deleting error reports is not allowed.
 * - Listing error reports is denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to create error reports.
     * @path /artifacts/{appId}/public/data/error_reports/{errorReportId}
     * @allow (create) request.auth != null with valid error report data.
     * @deny (create) request.auth == null.
     * @deny (update) Always. Error reports cannot be updated.
     * @deny (delete) Always. Error reports cannot be deleted.
     * @principle Allows any authenticated user to create error reports under a specific application ID.
     */
    match /artifacts/{appId}/public/data/error_reports/{errorReportId} {
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.reportedByUserId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // Define helper functions to improve readability and maintainability.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}