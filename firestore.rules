/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on document ownership
 * while relaxing data validation to accelerate prototyping. It focuses on
 * securing access to error reports submitted by technicians, ensuring that
 * users can only modify reports they own or have explicit permission to access
 * (in future iterations).
 *
 * Data Structure:
 * Error reports are stored in the `artifacts/{appId}/public/data/error_reports/{errorReportId}`
 * collection. The `appId` parameter isolates data for each application. Each
 * error report includes a `reportedByUserId` field indicating the owner.
 *
 * Key Security Decisions:
 * - Only the document owner can update or delete an error report.
 * - Read access is public.
 * - Data validation is minimized to essential authorization checks (e.g.,
 *   ownership).
 * - Listing is enabled for all.
 *
 * Denormalization for Authorization:
 * The `reportedByUserId` field is crucial for ownership checks, avoiding the
 * need for complex queries to determine who owns a given error report. This
 * denormalization simplifies the security rules and improves performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading error reports and owner-only updates and deletes.
     * @path artifacts/{appId}/public/data/error_reports/{errorReportId}
     * @allow (get, list): Any user can read the error reports.
     * @allow (create): Only the user that matches the reportByUserId field
     * @allow (update, delete): The user must be the owner of the document.
     * @deny (create): If the user does not match the reportByUserId field.
     * @deny (update, delete): If the user does not match the owner.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /artifacts/{appId}/public/data/error_reports/{errorReportId} {
      // Allows anyone to read the error reports.
      allow get, list: if true;

      // Allows creation of a new error report if the reportedByUserId matches the user's ID.
      allow create: if isSignedIn() && request.resource.data.reportedByUserId == request.auth.uid;

      // Allows updates if the user is the owner of the error report and the document exists.
      allow update: if isSignedIn() && isExistingOwner(resource.data.reportedByUserId);

      // Allows deletion if the user is the owner of the error report and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(resource.data.reportedByUserId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Combines ownership check with existence check for update and delete.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}