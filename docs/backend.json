{
  "entities": {
    "ErrorReport": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ErrorReport",
      "type": "object",
      "description": "Represents an error report submitted by a technician.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the error report entity."
        },
        "clientName": {
          "type": "string",
          "description": "The name or ID of the client affected by the error."
        },
        "technicianName": {
          "type": "string",
          "description": "The name of the technician who submitted the error report."
        },
        "errorDate": {
          "type": "string",
          "description": "The date when the error occurred.",
          "format": "date-time"
        },
        "reportText": {
          "type": "string",
          "description": "A detailed description of the problem, steps to reproduce it, and its impact on the client."
        },
        "mediaUrl": {
          "type": "string",
          "description": "URL of the uploaded media file (image or video) associated with the error report.",
          "format": "uri"
        },
        "zipUrl": {
          "type": "string",
          "description": "URL of the uploaded zipped database file associated with the error report.",
          "format": "uri"
        },
        "reportedByUserId": {
          "type": "string",
          "description": "Reference to User. The unique identifier of the user who submitted the error report. (Relationship: User 1:N ErrorReport)"
        },
        "generatedAt": {
          "type": "string",
          "description": "The date and time when the error report was generated.",
          "format": "date-time"
        },
        "appId": {
          "type": "string",
          "description": "The unique identifier of the application where the error was reported. "
        }
      },
      "required": [
        "id",
        "clientName",
        "technicianName",
        "errorDate",
        "reportText",
        "reportedByUserId",
        "generatedAt",
        "appId"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "artifacts/{appId}/public/data/error_reports/{errorReportId}",
        "definition": {
          "entityName": "ErrorReport",
          "schema": {
            "$ref": "#/backend/entities/ErrorReport"
          },
          "description": "Stores error reports submitted by technicians for a specific application. Includes the 'appId' parameter for application-specific data isolation. The 'reportedByUserId' field stores the user ID that created the document.",
          "params": [
            {
              "name": "appId",
              "description": "The unique identifier of the application."
            },
            {
              "name": "errorReportId",
              "description": "The unique identifier of the error report."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to store error reports submitted by technicians. To ensure authorization independence and secure data access, the structure incorporates denormalization and structural segregation. Error reports are stored under a path that includes the application ID, ensuring that each application's data is isolated. Given the constraints of anonymous auth and the requirements for filtering and listing reports, a public data structure is used for the error reports. The structure supports QAPs by segregating error reports based on `appId` and storing them in a location that simplifies listing without exposing private user data."
  }
}